3040 Tutorial Overview

Bradley Harper
1a. Hook

1b. (Look no further) Introduce The Knapsack Problem

2. Definition(What is the knapsack???)

3. What problem does it solve (how does it solve the problem i made)

***Write out Sript for this***

Say that you want to get a good grade on a test but you're very limited on the time you have to study for it. Some chapters may take longer to review than others, yet some may have more important information.
How would you decide which chapters are the best to look at to get the highest test grade?

Hello, I am Bradley Harper, and today I would like to introduce you to the Knapsack Problem.

The knapsack problem is a problem in combinatorial optimization: Given a set of items, each with a weight and a value, we would determine the amount of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.

It derives its name from a scenario where, given a set of items with specific weights and assigned values, the goal is to maximize the value in a knapsack while remaining within the weight constraint.

Simply put, the Knapsack Problem wants to maximize rewards per weight or given effort.

In our testing example this would refer to which chapters will have more questions on the test and which will have less depending on how long the chapters are and how much time you put into each.

Over the years, the Knapsack problem has done nothing but grow in popularity and develop a pretty well-known name for itself. A 1998 study of the Stony Brook University Algorithm Repository showed that, out of 75 algorithmic problems, the knapsack problem was the 18th most popular and the 4th most needed after kd-trees, suffix trees, and the bin packing problem.

There are two approaches to the knapsack problem, the 0-1 method or the fractional. The 0-1 describes either taking one of a whole item or none, whereas the fractional can take just that: fractions of 
the items.

With a space and time complexity dependent solely on the size of the knapsack as well as the items to choose from, the algorithm is fairly efficient. O(n*w) n is num items, and w is weight left over

Despite feeling like a niche computer science term, it turns out the knapsack is all around us. After reading some articles and blogposts regarding the topic, it turns out this problem shows up when it's least expected. In roleplaying video games such as the popular 2011 title, Skyrim, a player has a carrying capacity and a value, monetary or sentimental, assigned to the items they've scoured the realm of Tamriel for. When a player is deep in a dungeon and they find a new expensive or just interesting item, but their inventory is full, it's time to apply knapsack level programming to decide what to get rid of.